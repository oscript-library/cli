#использовать "../src/core"
#Использовать asserts
#Использовать logos

Перем юТест;
Перем Лог;

Функция ПолучитьСписокТестов(Знач Тестирование) Экспорт

	юТест = Тестирование;
	
	ИменаТестов = Новый Массив;
	
	ИменаТестов.Добавить("ТестДолжен_ПроверитьПарсингБулевоОпций");
	ИменаТестов.Добавить("ТестДолжен_ПроверитьПарсингМассивовБулевоОпций");
	ИменаТестов.Добавить("ТестДолжен_ПроверитьПарсингОпций");
	ИменаТестов.Добавить("ТестДолжен_ПроверитьПарсингМассивовОпций");
	
	Возврат ИменаТестов;

КонецФункции

Процедура ТестДолжен_ПроверитьПарсингБулевоОпций() Экспорт
	

	force = Опция("f force",  Ложь).Флаг();
	g = Опция("g",  Ложь).Флаг();
	x = Опция("x",  Ложь).Флаг();
	y = Опция("y",  Ложь).Флаг();

	ИндексОпций = Новый Соответствие;
	ИндексОпций.Вставить("-f", force);
	ИндексОпций.Вставить("--force", force);
	ИндексОпций.Вставить("-g", g);
	ИндексОпций.Вставить("-x", x);
	ИндексОпций.Вставить("-y", y);

	О_Парсера = Новый ОпцияПарсера(force, ИндексОпций);
	Утверждения.ПроверитьРавенство("-f", О_Парсера.ВСтроку(), "Парсер опции должен быть равен -f");

	ТестовыеСлучаи = Новый Массив;

	ТестовыеСлучаи.Добавить(ТестовыйСлучай("-f x", "x", "Истина"));
	ТестовыеСлучаи.Добавить(ТестовыйСлучай("-f=true x", "x", "Истина"));
	ТестовыеСлучаи.Добавить(ТестовыйСлучай("-f=false x", "x", "Ложь"));
	ТестовыеСлучаи.Добавить(ТестовыйСлучай("--force x", "x", "Истина"));
	ТестовыеСлучаи.Добавить(ТестовыйСлучай("--force=true x", "x", "Истина"));
	ТестовыеСлучаи.Добавить(ТестовыйСлучай("--force=false x", "x", "Ложь"));
	ТестовыеСлучаи.Добавить(ТестовыйСлучай("-fgxy x", "-gxy x", "Истина"));
	ТестовыеСлучаи.Добавить(ТестовыйСлучай("-gfxy x", "-gxy x", "Истина"));
	ТестовыеСлучаи.Добавить(ТестовыйСлучай("-gxfy x", "-gxy x", "Истина"));
	ТестовыеСлучаи.Добавить(ТестовыйСлучай("-gxyf x", "-gxy x", "Истина"));
	
	Для каждого Тест Из ТестовыеСлучаи Цикл
		НачальноеКоличество = Тест.Аргументы.Количество();
			
		Лог.Отладка("Проверяю тестовый случай: %1", СтрСоединить(Тест.Аргументы, " "));
		Контекст = Новый КонтекстПарсеров();
		Результат = О_Парсера.Поиск(Тест.Аргументы, Контекст);
		Утверждения.ПроверитьИстину(Результат.Найден, "Опция (-f) должен быть найдена");
		Утверждения.ПроверитьРавенство(НачальноеКоличество, Тест.Аргументы.Количество(), "Количество аргументов не должно измениться");
			
		Утверждения.ПроверитьРавенство(СтрСоединить(Результат.Аргументы, " "), СтрСоединить(Тест.АргументыВыхода, " "), "Аргументы выходные должны быть равны");
		Утверждения.ПроверитьРавенство(1, Контекст.Опции[О_Парсера.Опция].Количество(), "Количество результатов должно быть 1");
		Утверждения.ПроверитьРавенство(Булево(Контекст.Опции[О_Парсера.Опция][0]), Булево(Тест.ЗначениеОпции[0]), "Ожидаемые результаты должны быть равны");

		КонтекстСброса = Новый КонтекстПарсеров();
		КонтекстСброса.СбросОпций = Истина;
		Результат = О_Парсера.Поиск(Тест.Аргументы, КонтекстСброса);
		Утверждения.ПроверитьЛожь(Результат.Найден, "Опция (-f) не должена быть найдена");

	КонецЦикла;

КонецПроцедуры

Процедура ТестДолжен_ПроверитьПарсингМассивовБулевоОпций() Экспорт
	
	force = Опция("f force",  Ложь).ТМассивБулево();
	g = Опция("g",  Ложь).Флаг();
	x = Опция("x",  Ложь).Флаг();
	y = Опция("y",  Ложь).Флаг();

	ИндексОпций = Новый Соответствие;
	ИндексОпций.Вставить("-f", force);
	ИндексОпций.Вставить("--force", force);
	ИндексОпций.Вставить("-g", g);
	ИндексОпций.Вставить("-x", x);
	ИндексОпций.Вставить("-y", y);

	О_Парсера = Новый ОпцияПарсера(force, ИндексОпций);
	Утверждения.ПроверитьРавенство("-f", О_Парсера.ВСтроку(), "Парсер опции должен быть равен -f");

	ТестовыеСлучаи = Новый Массив;

	ТестовыеСлучаи.Добавить(ТестовыйСлучай("-f -f x", "x", "Истина Истина"));
	ТестовыеСлучаи.Добавить(ТестовыйСлучай("-f=true -f=true x", "x", "Истина Истина"));
	ТестовыеСлучаи.Добавить(ТестовыйСлучай("-f=false -f=false x", "x", "Ложь Ложь"));
	ТестовыеСлучаи.Добавить(ТестовыйСлучай("-f=true -f=false x", "x", "Истина Ложь"));
	ТестовыеСлучаи.Добавить(ТестовыйСлучай("--force --force x", "x", "Истина Истина"));
	ТестовыеСлучаи.Добавить(ТестовыйСлучай("--force=true --force=true x", "x", "Истина Истина"));
	ТестовыеСлучаи.Добавить(ТестовыйСлучай("--force=false --force=false x", "x", "Ложь Ложь"));
	ТестовыеСлучаи.Добавить(ТестовыйСлучай("--force=true --force=false x", "x", "Истина Ложь"));
	ТестовыеСлучаи.Добавить(ТестовыйСлучай("-f -fgxy x", "-gxy x", "Истина Истина"));
	ТестовыеСлучаи.Добавить(ТестовыйСлучай("-f -gfxy x", "-gxy x", "Истина Истина"));
	ТестовыеСлучаи.Добавить(ТестовыйСлучай("-f -gxfy x", "-gxy x", "Истина Истина"));
	ТестовыеСлучаи.Добавить(ТестовыйСлучай("-f -gxyf x", "-gxy x", "Истина Истина"));
	
	ТипМассивБулево = Новый ТипМассивБулево();

	Для каждого Тест Из ТестовыеСлучаи Цикл
		НачальноеКоличество = Тест.Аргументы.Количество();
		
		Лог.Отладка("Проверяю тестовый случай: %1", СтрСоединить(Тест.Аргументы, " "));
		Контекст = Новый КонтекстПарсеров();

		Результат = О_Парсера.Поиск(Тест.Аргументы, Контекст);
		Утверждения.ПроверитьИстину(Результат.Найден, "Опция (-f) должен быть найдена");
		Утверждения.ПроверитьРавенство(НачальноеКоличество, Тест.Аргументы.Количество(), "Количество аргументов не должно измениться");
		
		Результат = О_Парсера.Поиск(Результат.Аргументы, Контекст);
		Утверждения.ПроверитьИстину(Результат.Найден, "Опция (-f) должен быть найдена");
		Утверждения.ПроверитьРавенство(НачальноеКоличество, Тест.Аргументы.Количество(), "Количество аргументов не должно измениться");

		МассивЗначений = Новый Массив;
		Для Каждого Значение Из Контекст.Опции[О_Парсера.Опция] Цикл
			ТипМассивБулево.УстановитьЗначение(Значение, МассивЗначений);
		КонецЦикла;

		Утверждения.ПроверитьРавенство(СтрСоединить(Результат.Аргументы, " "), СтрСоединить(Тест.АргументыВыхода, " "), "Аргументы выходные должны быть равны");
		Утверждения.ПроверитьРавенство(ТипМассивБулево.ВСтроку(МассивЗначений), СтрСоединить(Тест.ЗначениеОпции, ", "), "Ожидаемые результаты должны быть равны");

		КонтекстСброса = Новый КонтекстПарсеров();
		КонтекстСброса.СбросОпций = Истина;
		Результат = О_Парсера.Поиск(Тест.Аргументы, КонтекстСброса);
		Утверждения.ПроверитьЛожь(Результат.Найден, "Опция (-f) не должена быть найдена");

	КонецЦикла;

КонецПроцедуры

Функция ТестовыйСлучай(Знач Аргументы, Знач АргументыВыхода, Знач ЗначениеОпции)
	
	Тест = Новый Структура;
	Тест.Вставить("Аргументы", СтрРазделить(Аргументы," "));
	Тест.Вставить("АргументыВыхода", СтрРазделить(АргументыВыхода," "));
	Тест.Вставить("ЗначениеОпции", СтрРазделить(ЗначениеОпции," "));

	Возврат Тест;
КонецФункции

Процедура ТестДолжен_ПроверитьПарсингОпций() Экспорт
	

	НаименованияОпции  = Новый Массив;
	НаименованияОпции.Добавить("-f");
	НаименованияОпции.Добавить("--force");

	МассивОпций = Новый Массив;
	МассивОпций.Добавить(Опция("f force", "").ТСтрока());
	МассивОпций.Добавить(Опция("f force", "").ТЧисло());
	// TODO Написать отдельную проверку для дат
	МассивОпций.Добавить(Опция("f force", "").ТДата());
	

	ТестовыеСлучаи = Новый Массив;

	ТестовыеСлучаи.Добавить(ТестовыйСлучай("-f x", "", "x"));
	ТестовыеСлучаи.Добавить(ТестовыйСлучай("-f=x y", "y", "x"));
	ТестовыеСлучаи.Добавить(ТестовыйСлучай("-fx y", "y", "x"));
	ТестовыеСлучаи.Добавить(ТестовыйСлучай("-afx y", "-a y", "x"));
	ТестовыеСлучаи.Добавить(ТестовыйСлучай("-af x y", "-a y", "x"));
	ТестовыеСлучаи.Добавить(ТестовыйСлучай("--force x", "", "x"));
	ТестовыеСлучаи.Добавить(ТестовыйСлучай("--force=x y", "y", "x"));
	
	a = Новый ПараметрКоманды("опция", "a",  Ложь, "Тестовый параметр a");


	Для каждого Тест Из ТестовыеСлучаи Цикл
		
		
		Для каждого ОпцияForce Из МассивОпций Цикл
			НачальноеКоличество = Тест.Аргументы.Количество();
			Лог.Отладка("Проверяю тестовый случай: %1", СтрСоединить(Тест.Аргументы, " "));
			Лог.Отладка("-> тип опции: %1", ОпцияForce.ТипОпции);
		
			ИндексОпций = Новый Соответствие;
			ИндексОпций.Вставить("-f", ОпцияForce);
			ИндексОпций.Вставить("--force", ОпцияForce);
			ИндексОпций.Вставить("-a", a);
			АргументыТеста = Тест.Аргументы;
			О_Парсера = Новый ОпцияПарсера(ОпцияForce, ИндексОпций);
			Утверждения.ПроверитьРавенство("-f", О_Парсера.ВСтроку(), "Парсер опции должен быть равен -f");
		
			Контекст = Новый КонтекстПарсеров();
			Результат = О_Парсера.Поиск(АргументыТеста, Контекст);
			Утверждения.ПроверитьИстину(Результат.Найден, "Опция (-f) должна быть найдена");
			Утверждения.ПроверитьРавенство(НачальноеКоличество, Тест.Аргументы.Количество(), "Количество аргументов не должно измениться");
			
			Утверждения.ПроверитьРавенство(СтрСоединить(Результат.Аргументы, " "), СтрСоединить(Тест.АргументыВыхода, " "), "Аргументы выходные должны быть равны");
			Утверждения.ПроверитьРавенство(1, Контекст.Опции[О_Парсера.Опция].Количество(), "Количество результатов должно быть 1");
			Утверждения.ПроверитьРавенство(Контекст.Опции[О_Парсера.Опция][0], Тест.ЗначениеОпции[0], "Ожидаемые результаты должны быть равны");
			
			КонтекстСброса = Новый КонтекстПарсеров();
			КонтекстСброса.СбросОпций = Истина;
			Результат = О_Парсера.Поиск(АргументыТеста, КонтекстСброса);
			Утверждения.ПроверитьЛожь(Результат.Найден, "Опция (-f) не должна быть найдена");

		
		КонецЦикла;
		
	КонецЦикла;	

КонецПроцедуры

Процедура ТестДолжен_ПроверитьПарсингМассивовОпций() Экспорт
	

	НаименованияОпции  = Новый Массив;
	НаименованияОпции.Добавить("-f");
	НаименованияОпции.Добавить("--force");

	МассивОпций = Новый Массив;
	МассивОпций.Добавить(Опция("f force", Новый Массив).ТМассивСтрок());
	МассивОпций.Добавить(Опция("f force", Новый Массив).ТМассивЧисел());
	// TODO Написать отдельную проверку для дат
	МассивОпций.Добавить(Опция("f force", Новый Массив).ТМассивДат());
	

	ТестовыеСлучаи = Новый Массив;

	ТестовыеСлучаи.Добавить(ТестовыйСлучай("-f x -f z", "", "x z"));
	ТестовыеСлучаи.Добавить(ТестовыйСлучай("-f=x -f=z y", "y", "x z"));
	ТестовыеСлучаи.Добавить(ТестовыйСлучай("-fx -fz y", "y", "x z"));
	ТестовыеСлучаи.Добавить(ТестовыйСлучай("-afx -yfz", "-a -y", "x z"));
	ТестовыеСлучаи.Добавить(ТестовыйСлучай("-af x -yf z", "-a -y", "x z"));
	ТестовыеСлучаи.Добавить(ТестовыйСлучай("--force x --force z", "", "x z"));
	ТестовыеСлучаи.Добавить(ТестовыйСлучай("--force=x --force=z y", "y", "x z"));
	
	a = Новый ПараметрКоманды("опция", "a",  Ложь, "Тестовый параметр a");
	y = Новый ПараметрКоманды("опция", "y",  Ложь, "Тестовый параметр a");


	Для каждого Тест Из ТестовыеСлучаи Цикл
		
		
		Для каждого ОпцияForce Из МассивОпций Цикл
			НачальноеКоличество = Тест.Аргументы.Количество();
			Лог.Отладка("Проверяю тестовый случай: %1", СтрСоединить(Тест.Аргументы, " "));
			Лог.Отладка("-> тип опции: %1", ОпцияForce.ТипОпции);
		
			ИндексОпций = Новый Соответствие;
			ИндексОпций.Вставить("-f", ОпцияForce);
			ИндексОпций.Вставить("--force", ОпцияForce);
			ИндексОпций.Вставить("-a", a);
			ИндексОпций.Вставить("-y", y);
			АргументыТеста = Тест.Аргументы;
			О_Парсера = Новый ОпцияПарсера(ОпцияForce, ИндексОпций);
			Утверждения.ПроверитьРавенство("-f", О_Парсера.ВСтроку(), "Парсер опции должен быть равен -f");
		
			Контекст = Новый КонтекстПарсеров();
			Результат = О_Парсера.Поиск(АргументыТеста, Контекст);
			Утверждения.ПроверитьИстину(Результат.Найден, "Опция (-f) должна быть найдена");
			Утверждения.ПроверитьРавенство(НачальноеКоличество, Тест.Аргументы.Количество(), "Количество аргументов не должно измениться");
			
			Результат = О_Парсера.Поиск(Результат.Аргументы, Контекст);
			Утверждения.ПроверитьИстину(Результат.Найден, "Опция (-f) должна быть найдена");
			Утверждения.ПроверитьРавенство(НачальноеКоличество, Тест.Аргументы.Количество(), "Количество аргументов не должно измениться");
			

			Утверждения.ПроверитьРавенство(СтрСоединить(Результат.Аргументы, " "), СтрСоединить(Тест.АргументыВыхода, " "), "Аргументы выходные должны быть равны");
			Утверждения.ПроверитьРавенство(СтрСоединить(Контекст.Опции[О_Парсера.Опция], " "), СтрСоединить(Тест.ЗначениеОпции, " "), "Ожидаемые результаты должны быть равны");
			
			КонтекстСброса = Новый КонтекстПарсеров();
			КонтекстСброса.СбросОпций = Истина;
			Результат = О_Парсера.Поиск(АргументыТеста, КонтекстСброса);
			Утверждения.ПроверитьЛожь(Результат.Найден, "Опция (-f) не должна быть найдена");
		
		КонецЦикла;
		
	КонецЦикла;	

КонецПроцедуры

Функция Опция(Наименование, ЗначениеПоУмолчанию)
	Возврат Новый ПараметрКоманды("опция", Наименование,  ЗначениеПоУмолчанию, "Тестовый параметр f");
КонецФункции

Лог = Логирование.ПолучитьЛог("oscript.lib.cli_class_opt");
//Лог.УстановитьУровень(УровниЛога.Отладка);