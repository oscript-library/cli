#Использовать logos

Перем Лог;

Перем Завершено Экспорт; // Булево, признак завершения 

// Массив, элементов соединений типа Структура
//   * Парсер - объект - ссылка на класс парсера
//   * СледующееСостояние - элемент типа Структура
Перем МассивСоединений Экспорт; 

Процедура ПриСозданииОбъекта()

	МассивСоединений = Новый Массив;
	Завершено = Ложь;

КонецПроцедуры

// Процедура добавляет соединение к текущему состоянию
//
// Параметры:
//   Парсер - Объект - ссылка на произвольный класс парсера 
//   СледующееСостояние - Объект.Совпадение - ссылка на класс Совпадение, следующего состояния
//   Обязательное - Булево - обязательное соединение
//
//  Возвращаемое значение:
//   Объект.Совпадение - ссылка на класс Совпадение, следующего состояния
//
Функция Т(Парсер, СледующееСостояние, Обязательное = Ложь) Экспорт
	
	МассивСоединений.Добавить(НовоеСоединениеСовпадений(Парсер, СледующееСостояние, Обязательное));
	Возврат СледующееСостояние;

КонецФункции

Функция НовоеСоединениеСовпадений(Парсер, СледующееСостояние, Обязательное)

	Возврат Новый Структура("Парсер, СледующееСостояние, Обязательное", Парсер, СледующееСостояние, Обязательное);
	
КонецФункции

// Выполняет подготовку соединений 
//
Процедура Подготовить() Экспорт
	
	ПосетилиСостояниеСортировки = Новый Соответствие;
	ПосетилиСостояниеУпрощения = Новый Соответствие;
	ОбработчикВыборкиПути = Новый ВыборСовпадений();
	ОбработчикВыборкиПути.УпроститьСоединения(ЭтотОбъект, ЭтотОбъект, ПосетилиСостояниеУпрощения);
	ОбработчикВыборкиПути.СортировкаСоединений(ЭтотОбъект, ПосетилиСостояниеСортировки);

КонецПроцедуры

// Выполняет чтения параметров команды
//
// Параметры:
//   ВходящиеАргументы - Массив - массив входящих аргументов, типа строка
//
//  Возвращаемое значение:
//   Структура:
//     * Успешно - Булево - результат поиска параметров:
//                            * Истина - все найдено
//                            * Ложь - завершено с ошибками
//     * Ошибки - Массив из Строка - массив ошибок
//
Функция Прочитать(ВходящиеАргументы) Экспорт
	
	Контекст = Новый КонтекстПарсеров;
	
	Результат = ПрименитьКонтекст(ВходящиеАргументы, Контекст);

	Если Результат.Успешно Тогда

		ОбработчикВыборкиПути = Новый ВыборСовпадений();
		ОбработчикВыборкиПути.ЗаполнитьЗначения(Контекст.Опции);
		ОбработчикВыборкиПути.ЗаполнитьЗначения(Контекст.Аргументы);
		
		Лог.Отладка("Проверка контекста: 
		| количество опций: %1
		| количество аргументов %2", Контекст.Опции.Количество(), Контекст.Аргументы.Количество());

	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Выполняет поиск параметров команды в рамках контекста
//
// Параметры:
//   ВходящиеАргументы - Массив - массив входящих аргументов, типа строка
//   Контекст - Объект - ссылка на класс "КонтекстПарсеров"
//
//  Возвращаемое значение:
//   Структура:
//     * Успешно - Булево - результат поиска параметров:
//                            * Истина - все найдено
//                            * Ложь - завершено с ошибками
//     * Ошибки - Массив из Строка - массив ошибок
//
Функция ПрименитьКонтекст(Знач ВходящиеАргументы, Контекст) Экспорт
	
	Лог.Отладка("Применяю контекст: 
	| количество соединений %1
	| количество входящих аргументов %2
	| Завершено: %3", МассивСоединений.Количество(), ВходящиеАргументы.Количество(), Завершено);
	
	Результат = Новый Структура("Успешно, Ошибки", Ложь, Новый Массив());

	Если Завершено 
		И ВходящиеАргументы.Количество() = 0 Тогда
		Результат.Успешно = Истина;
		Возврат Результат;
	КонецЕсли;

	Если ВходящиеАргументы.Количество() > 0 Тогда
		
		ПервыйАргумент = ВходящиеАргументы[0];
		Если Не Контекст.СбросОпций
			И СокрЛП(ПервыйАргумент) = "--" Тогда
			Контекст.СбросОпций = Истина;
			ВходящиеАргументы.Удалить(0);
		КонецЕсли;

	КонецЕсли;

	МассивСовпадений = Новый Массив;

	Лог.Отладка("Перебираю возможные пути: %1", МассивСоединений.Количество());
	Номер = 1;
	Для каждого Соединение Из МассивСоединений Цикл
		Лог.Отладка("Перебираю путь номер: %1", Номер);
		ЧистыйКонтекст = Новый КонтекстПарсеров;
		ЧистыйКонтекст.СбросОпций = Контекст.СбросОпций;
		ЧистыйКонтекст.НеВключенныеАргументы = Контекст.НеВключенныеАргументы;

		РезультатПоиска = Соединение.Парсер.Поиск(ВходящиеАргументы, ЧистыйКонтекст);
		
		Лог.Отладка("Нашли опцию или аргумент: %2 %1", РезультатПоиска.Найден, Соединение.Парсер.ВСтроку());
		лог.Отладка("Количество опций в контексте: %1", ЧистыйКонтекст.Опции.Количество());
		лог.Отладка("Количество аргументов после поиска: %1", РезультатПоиска.Аргументы.Количество());
		Если РезультатПоиска.Найден Тогда
			Лог.Отладка("Добавляю в массив найденное значение");
			МассивСовпадений.Добавить(НовоеСовпадение(Соединение, РезультатПоиска.Аргументы, ЧистыйКонтекст));
		КонецЕсли;

		Если ЗначениеЗаполнено(РезультатПоиска.Ошибка)
			И (Соединение.Обязательное ИЛИ ОшибкиПарсера.ОшибкаТребуетВнимания(РезультатПоиска.Ошибка)) Тогда
			Результат.Ошибки.Добавить(РезультатПоиска.Ошибка);
		КонецЕсли;

		Номер = Номер + 1;
	КонецЦикла;

	Если МассивСовпадений.Количество() Тогда
		Результат.Ошибки.Очистить();
	КонецЕсли;
	
	Для каждого ЭлементСовпадения Из МассивСовпадений Цикл

		СледующееСостояние = ЭлементСовпадения.Соединение.СледующееСостояние;

		РезультатСледующего = СледующееСостояние.ПрименитьКонтекст(ЭлементСовпадения.Результат, ЭлементСовпадения.Контекст);
		Если РезультатСледующего.Успешно Тогда
			Контекст.ПрисоединитьКонтекст(ЭлементСовпадения.Контекст);
			Возврат РезультатСледующего;
		КонецЕсли;

		Для Каждого Ошибка Из РезультатСледующего.Ошибки Цикл
			Результат.Ошибки.Добавить(Ошибка);
		КонецЦикла;

	КонецЦикла;

	Если Результат.Ошибки.Количество() = 0 И ВходящиеАргументы.Количество() > 0 Тогда
		ПервыйАргумент = ВходящиеАргументы[0];
		Если СтрНачинаетсяС(ПервыйАргумент, "-") Тогда
			Результат.Ошибки.Добавить(ОшибкиПарсера.ОшибкаНеожидаемаяОпция(ПервыйАргумент));
		Иначе
			Результат.Ошибки.Добавить(ОшибкиПарсера.ОшибкаНеожидаемыйПараметр(ПервыйАргумент));
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции
	
// Выводит соединения текущего состояния
//
Процедура СообщитьСоединения() Экспорт

	Лог.Отладка("Завершено: %1", Завершено);
	Лог.Отладка("КоличествоСоединений: %1", МассивСоединений.Количество());
	
	Для каждого Переменная Из МассивСоединений Цикл

		СледующееСостояние = Переменная.СледующееСостояние;
		Лог.Отладка("Класс текущего соединения: %1", Переменная.Парсер);
		Лог.Отладка("Следующее состояние завершено: %1", СледующееСостояние.Завершено);
		Лог.Отладка("Следующее состояние КоличествоСоединений: %1", СледующееСостояние.МассивСоединений.Количество());
		Лог.Отладка("Вывожу сообщения для следующего состояния");
		СледующееСостояние.СообщитьСоединения();	
	
	КонецЦикла;

КонецПроцедуры

// Проверяет наличие соединения в текущем состоянии
//
// Параметры:
//   СоединениеПроверки - структура - Структура вида,
//                           * Парсер - объект - ссылка на класс парсера
//                           * СледующееСостояние - элемент типа Структура
//  Возвращаемое значение:
//   Булево - Истина, если массив соединений, содержит переданное соединения
//
Функция СодержитСоединения(Знач СоединениеПроверки) Экспорт

	Для каждого Соединение Из МассивСоединений Цикл
		
		Если Соединение.СледующееСостояние = СоединениеПроверки.СледующееСостояние
			И Соединение.Парсер = СоединениеПроверки.Парсер Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;

	Возврат Ложь;
	
КонецФункции

// Выполняет упрощение своих соединений
//
//  Возвращаемое значение:
//   Булево - результат упрощения соединения
//
Функция УпроститьСвоиСоединения() Экспорт
	
	Индекс = 0;
	
	Лог.Отладка("Я всего соединений: %1", МассивСоединений.Количество());
	
	Пока Индекс <= МассивСоединений.ВГраница() Цикл
		Лог.Отладка("Я всего соединений внутри: %1", МассивСоединений.Количество());
		
		Соединение = МассивСоединений[Индекс];

		Если ТипЗнч(Соединение.Парсер) = Тип("ЛюбойСимвол") Тогда
			Лог.Отладка("Я Нашел ЛюбойСимвол");
	
			СледующееСостояние = Соединение.СледующееСостояние;
			
			Для каждого СоединениеСледующего Из СледующееСостояние.МассивСоединений Цикл

				Если НЕ СодержитСоединения(СоединениеСледующего) Тогда

					Лог.Отладка("Я добавил сюда подчиненные соединения");
	
					МассивСоединений.Добавить(СоединениеСледующего);
					Лог.Отладка("Добавляю соединение с парсером %1", СоединениеСледующего.Парсер);
	
				КонецЕсли;

			КонецЦикла;

			Лог.Отладка("Упростить завершено %1", Завершено);
			Лог.Отладка("Упростить следующие состояние завершено %1", СледующееСостояние.Завершено);
			
			Если СледующееСостояние.Завершено Тогда
				Завершено = Истина;
				Лог.Отладка("Упростить установлено завершено %1", Завершено);
			КонецЕсли;
			Лог.Отладка("Удалил соединение с индексом %1", Индекс);
			МассивСоединений.Удалить(Индекс);

			Возврат Истина;

		Иначе

			Индекс = Индекс + 1;

		КонецЕсли;
		
	КонецЦикла;

	Возврат Ложь;

КонецФункции

Функция НовоеСовпадение(Соединение, Результат, Контекст)
	Возврат Новый Структура("Соединение, Результат, Контекст", Соединение, Результат, Контекст);
КонецФункции

Лог = Логирование.ПолучитьЛог("oscript.lib.cli_state");